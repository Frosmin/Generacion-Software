[
    {
      "id": 5,
      "title": "Manejo de archivos - Leer y escribir datos",
      "paragraph": [
        "Los archivos nos permiten guardar información de forma permanente. Tu programa puede leer datos guardados anteriormente y crear nuevos archivos con resultados."
      ],
      "subcontent": [
        {
          "subtitle": "¿Por qué usar archivos?",
          "subparagraph": [
            "Imagina que creas una lista de tareas. Sin archivos, cuando cierres el programa, todo se pierde. Con archivos, puedes guardar tus datos y recuperarlos después."
          ],
          "example": ["# Sin archivos - los datos se pierden\ntareas = ['Estudiar Python', 'Hacer ejercicio', 'Leer un libro']\nprint('Tareas de hoy:')\nfor tarea in tareas:\n    print(f'- {tarea}')\n# Al cerrar el programa, las tareas desaparecen\n\n# Con archivos - los datos se conservan\n# Los datos se pueden guardar y recuperar después"]
        }
      ],
      "next": "leer_archivos"
    },
    {
      "id": 6,
      "title": "Leer archivos de texto",
      "paragraph": [
        "Leer archivos es como abrir un libro digital. Python puede leer el contenido completo o línea por línea."
      ],
      "subcontent": [
        {
          "subtitle": "Leer archivo completo",
          "subparagraph": [
            "La función open() abre un archivo, y read() lee todo su contenido de una vez."
          ],
          "example": ["# Leer todo el archivo\ntry:\n    archivo = open('mensaje.txt', 'r', encoding='utf-8')\n    contenido = archivo.read()\n    print('Contenido del archivo:')\n    print(contenido)\n    archivo.close()\nexcept FileNotFoundError:\n    print('El archivo no existe')\nexcept Exception as e:\n    print(f'Error al leer archivo: {e}')"]
        },
        {
          "subtitle": "Leer línea por línea",
          "subparagraph": [
            "Para archivos grandes, es mejor leer línea por línea para no usar mucha memoria."
          ],
          "example": ["# Leer línea por línea\ntry:\n    with open('lista_compras.txt', 'r', encoding='utf-8') as archivo:\n        print('Lista de compras:')\n        numero = 1\n        for linea in archivo:\n            linea = linea.strip()  # Quitar espacios y saltos de línea\n            if linea:  # Solo si la línea no está vacía\n                print(f'{numero}. {linea}')\n                numero += 1\nexcept FileNotFoundError:\n    print('Archivo de lista de compras no encontrado')"]
        },
        {
          "subtitle": "Leer como lista de líneas",
          "subparagraph": [
            "readlines() convierte cada línea del archivo en un elemento de una lista."
          ],
          "example": ["# Leer todas las líneas como lista\ntry:\n    with open('nombres.txt', 'r', encoding='utf-8') as archivo:\n        lineas = archivo.readlines()\n    \n    print(f'El archivo tiene {len(lineas)} líneas')\n    print('\\nPrimeras 5 líneas:')\n    \n    for i, linea in enumerate(lineas[:5]):\n        nombre = linea.strip()\n        print(f'{i+1}: {nombre}')\n        \nexcept FileNotFoundError:\n    print('Archivo de nombres no encontrado')"]
        }
      ],
      "next": "escribir_archivos"
    },
    {
      "id": 7,
      "title": "Escribir archivos de texto",
      "paragraph": [
        "Escribir archivos es como crear documentos digitales. Puedes crear nuevos archivos o agregar contenido a archivos existentes."
      ],
      "subcontent": [
        {
          "subtitle": "Crear y escribir archivo nuevo",
          "subparagraph": [
            "El modo 'w' (write) crea un archivo nuevo o sobrescribe uno existente."
          ],
          "example": ["# Crear un archivo de diario personal\nfrom datetime import datetime\n\nfecha_hoy = datetime.now().strftime('%Y-%m-%d %H:%M')\nentrada_diario = f\"\"\"\nFecha: {fecha_hoy}\n===================\n\nHoy aprendí sobre manejo de archivos en Python.\nEs muy útil para guardar datos de forma permanente.\n\n¿Qué haré mañana?\n- Practicar más con archivos\n- Crear un proyecto personal\n- Seguir aprendiendo Python\n\"\"\"\n\nwith open('mi_diario.txt', 'w', encoding='utf-8') as archivo:\n    archivo.write(entrada_diario)\n    \nprint('Entrada de diario guardada exitosamente')"]
        },
        {
          "subtitle": "Agregar contenido existente",
          "subparagraph": [
            "El modo 'a' (append) agrega contenido al final del archivo sin borrarlo."
          ],
          "example": ["# Agregar tareas a una lista existente\nnuevas_tareas = [\n    'Revisar emails',\n    'Llamar al médico',\n    'Comprar ingredientes para cena',\n    'Estudiar Python 30 minutos'\n]\n\nwith open('tareas_pendientes.txt', 'a', encoding='utf-8') as archivo:\n    archivo.write(f'\\n--- Tareas agregadas {datetime.now().strftime(\"%Y-%m-%d\")} ---\\n')\n    for tarea in nuevas_tareas:\n        archivo.write(f'[ ] {tarea}\\n')\n    archivo.write('\\n')\n\nprint(f'Se agregaron {len(nuevas_tareas)} tareas nuevas')"]
        },
        {
          "subtitle": "Proyecto: Libro de visitas",
          "subparagraph": [
            "Creemos un programa que permita a las personas dejar mensajes que se guarden permanentemente."
          ],
          "example": ["# Libro de visitas digital\nfrom datetime import datetime\n\ndef agregar_mensaje():\n    print('=== LIBRO DE VISITAS ===')\n    nombre = input('Tu nombre: ')\n    mensaje = input('Tu mensaje: ')\n    \n    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    \n    entrada = f\"\"\"\n{'='*50}\nNombre: {nombre}\nFecha: {timestamp}\nMensaje: {mensaje}\n{'='*50}\n\"\"\"\n    \n    with open('libro_visitas.txt', 'a', encoding='utf-8') as archivo:\n        archivo.write(entrada)\n    \n    print('¡Mensaje guardado! Gracias por visitarnos.')\n\ndef leer_mensajes():\n    try:\n        with open('libro_visitas.txt', 'r', encoding='utf-8') as archivo:\n            contenido = archivo.read()\n            if contenido.strip():\n                print('\\n=== MENSAJES DEL LIBRO DE VISITAS ===')\n                print(contenido)\n            else:\n                print('El libro de visitas está vacío')\n    except FileNotFoundError:\n        print('No hay mensajes aún')\n\n# Menú principal\nwhile True:\n    print('\\n1. Dejar mensaje')\n    print('2. Leer mensajes')\n    print('3. Salir')\n    \n    opcion = input('Elige opción (1-3): ')\n    \n    if opcion == '1':\n        agregar_mensaje()\n    elif opcion == '2':\n        leer_mensajes()\n    elif opcion == '3':\n        print('¡Hasta luego!')\n        break\n    else:\n        print('Opción no válida')"]
        }
      ],
      "next": "archivos_csv"
    },
    {
      "id": 8,
      "title": "Trabajar con archivos CSV",
      "paragraph": [
        "CSV (Comma Separated Values) es un formato popular para almacenar datos tabulares, como hojas de cálculo. Python tiene herramientas especiales para trabajar con ellos."
      ],
      "subcontent": [
        {
          "subtitle": "¿Qué es un archivo CSV?",
          "subparagraph": [
            "Un CSV es como una tabla donde cada fila es una línea y las columnas se separan por comas. Es perfecto para listas de datos estructurados."
          ],
          "example": ["# Ejemplo de contenido CSV:\n# nombre,edad,ciudad,profesion\n# Ana,25,Madrid,Ingeniera\n# Carlos,30,Barcelona,Doctor\n# Maria,28,Valencia,Profesora\n\n# Python puede leer esto fácilmente\nimport csv\n\n# Datos de ejemplo para crear un CSV\nestudiantes = [\n    ['Nombre', 'Edad', 'Carrera', 'Promedio'],\n    ['Juan', 20, 'Informática', 8.5],\n    ['María', 19, 'Medicina', 9.2],\n    ['Pedro', 21, 'Ingeniería', 7.8],\n    ['Ana', 20, 'Psicología', 8.9]\n]\n\nprint('Datos de estudiantes:')\nfor fila in estudiantes:\n    print(fila)"]
        },
        {
          "subtitle": "Escribir archivos CSV",
          "subparagraph": [
            "El módulo csv de Python facilita la creación de archivos CSV bien formateados."
          ],
          "example": ["import csv\nfrom datetime import datetime\n\n# Datos de inventario de una tienda\ninventario = [\n    ['Producto', 'Cantidad', 'Precio', 'Fecha_Actualizacion'],\n    ['Laptop', 15, 899.99, '2024-01-15'],\n    ['Mouse', 50, 25.50, '2024-01-15'],\n    ['Teclado', 30, 45.00, '2024-01-15'],\n    ['Monitor', 8, 299.99, '2024-01-15'],\n    ['Auriculares', 25, 79.99, '2024-01-15']\n]\n\n# Escribir archivo CSV\nwith open('inventario.csv', 'w', newline='', encoding='utf-8') as archivo:\n    escritor = csv.writer(archivo)\n    escritor.writerows(inventario)\n\nprint('Archivo de inventario creado exitosamente')\n\n# También podemos agregar productos nuevos\nproductos_nuevos = [\n    ['Webcam', 12, 89.99, datetime.now().strftime('%Y-%m-%d')],\n    ['Tablet', 6, 399.99, datetime.now().strftime('%Y-%m-%d')]\n]\n\nwith open('inventario.csv', 'a', newline='', encoding='utf-8') as archivo:\n    escritor = csv.writer(archivo)\n    escritor.writerows(productos_nuevos)\n\nprint('Productos nuevos agregados al inventario')"]
        },
        {
          "subtitle": "Leer y procesar archivos CSV",
          "subparagraph": [
            "Podemos leer archivos CSV y procesarlos como datos estructurados para análisis."
          ],
          "example": ["import csv\n\n# Leer y analizar datos del inventario\ntry:\n    with open('inventario.csv', 'r', encoding='utf-8') as archivo:\n        lector = csv.reader(archivo)\n        \n        # Leer encabezados\n        encabezados = next(lector)\n        print('Análisis de Inventario')\n        print('=' * 30)\n        \n        productos = []\n        valor_total = 0\n        \n        for fila in lector:\n            producto = fila[0]\n            cantidad = int(fila[1])\n            precio = float(fila[2])\n            fecha = fila[3]\n            \n            valor_producto = cantidad * precio\n            valor_total += valor_producto\n            \n            productos.append({\n                'nombre': producto,\n                'cantidad': cantidad,\n                'precio': precio,\n                'valor_total': valor_producto\n            })\n        \n        # Mostrar estadísticas\n        print(f'Total de productos: {len(productos)}')\n        print(f'Valor total del inventario: ${valor_total:.2f}')\n        \n        # Producto más valioso\n        mas_valioso = max(productos, key=lambda x: x['valor_total'])\n        print(f'Producto más valioso: {mas_valioso[\"nombre\"]} (${mas_valioso[\"valor_total\"]:.2f})')\n        \n        # Productos con stock bajo (menos de 10)\n        stock_bajo = [p for p in productos if p['cantidad'] < 10]\n        if stock_bajo:\n            print('\\nProductos con stock bajo:')\n            for p in stock_bajo:\n                print(f'- {p[\"nombre\"]}: {p[\"cantidad\"]} unidades')\n        \nexcept FileNotFoundError:\n    print('Archivo de inventario no encontrado')\nexcept Exception as e:\n    print(f'Error al procesar archivo: {e}')"]
        },
        {
          "subtitle": "Proyecto: Sistema de calificaciones",
          "subparagraph": [
            "Creemos un sistema completo para manejar calificaciones de estudiantes usando CSV."
          ],
          "example": ["import csv\nfrom datetime import datetime\n\nclass SistemaCalificaciones:\n    def __init__(self, archivo='calificaciones.csv'):\n        self.archivo = archivo\n        self.inicializar_archivo()\n    \n    def inicializar_archivo(self):\n        \"\"\"Crear archivo con encabezados si no existe\"\"\"\n        try:\n            with open(self.archivo, 'r') as f:\n                pass  # El archivo existe\n        except FileNotFoundError:\n            with open(self.archivo, 'w', newline='', encoding='utf-8') as archivo:\n                escritor = csv.writer(archivo)\n                escritor.writerow(['Estudiante', 'Materia', 'Calificacion', 'Fecha'])\n    \n    def agregar_calificacion(self, estudiante, materia, calificacion):\n        \"\"\"Agregar nueva calificación\"\"\"\n        fecha = datetime.now().strftime('%Y-%m-%d')\n        \n        with open(self.archivo, 'a', newline='', encoding='utf-8') as archivo:\n            escritor = csv.writer(archivo)\n            escritor.writerow([estudiante, materia, calificacion, fecha])\n        \n        print(f'Calificación registrada: {estudiante} - {materia}: {calificacion}')\n    \n    def mostrar_calificaciones(self, estudiante=None):\n        \"\"\"Mostrar calificaciones (todas o de un estudiante específico)\"\"\"\n        try:\n            with open(self.archivo, 'r', encoding='utf-8') as archivo:\n                lector = csv.reader(archivo)\n                encabezados = next(lector)\n                \n                calificaciones = list(lector)\n                \n                if estudiante:\n                    calificaciones = [c for c in calificaciones if c[0].lower() == estudiante.lower()]\n                    if not calificaciones:\n                        print(f'No se encontraron calificaciones para {estudiante}')\n                        return\n                \n                print('\\nCalificaciones:')\n                print(f\"{'Estudiante':<15} {'Materia':<15} {'Calificación':<12} {'Fecha':<10}\")\n                print('-' * 55)\n                \n                for cal in calificaciones:\n                    print(f\"{cal[0]:<15} {cal[1]:<15} {cal[2]:<12} {cal[3]:<10}\")\n                \n        except FileNotFoundError:\n            print('No hay calificaciones registradas')\n    \n    def calcular_promedio(self, estudiante):\n        \"\"\"Calcular promedio de un estudiante\"\"\"\n        try:\n            with open(self.archivo, 'r', encoding='utf-8') as archivo:\n                lector = csv.reader(archivo)\n                next(lector)  # Saltar encabezados\n                \n                calificaciones = []\n                for fila in lector:\n                    if fila[0].lower() == estudiante.lower():\n                        try:\n                            calificaciones.append(float(fila[2]))\n                        except ValueError:\n                            continue\n                \n                if calificaciones:\n                    promedio = sum(calificaciones) / len(calificaciones)\n                    print(f'Promedio de {estudiante}: {promedio:.2f}')\n                    print(f'Total de calificaciones: {len(calificaciones)}')\n                else:\n                    print(f'No se encontraron calificaciones para {estudiante}')\n                    \n        except FileNotFoundError:\n            print('No hay calificaciones registradas')\n\n# Programa principal\nsistema = SistemaCalificaciones()\n\nwhile True:\n    print('\\n=== SISTEMA DE CALIFICACIONES ===')\n    print('1. Agregar calificación')\n    print('2. Ver todas las calificaciones')\n    print('3. Ver calificaciones de un estudiante')\n    print('4. Calcular promedio de estudiante')\n    print('5. Salir')\n    \n    opcion = input('\\nElige una opción (1-5): ')\n    \n    if opcion == '1':\n        estudiante = input('Nombre del estudiante: ')\n        materia = input('Materia: ')\n        try:\n            calificacion = float(input('Calificación (0-10): '))\n            if 0 <= calificacion <= 10:\n                sistema.agregar_calificacion(estudiante, materia, calificacion)\n            else:\n                print('La calificación debe estar entre 0 y 10')\n        except ValueError:\n            print('Calificación inválida')\n    \n    elif opcion == '2':\n        sistema.mostrar_calificaciones()\n    \n    elif opcion == '3':\n        estudiante = input('Nombre del estudiante: ')\n        sistema.mostrar_calificaciones(estudiante)\n    \n    elif opcion == '4':\n        estudiante = input('Nombre del estudiante: ')\n        sistema.calcular_promedio(estudiante)\n    \n    elif opcion == '5':\n        print('¡Hasta luego!')\n        break\n    \n    else:\n        print('Opción no válida')"]
        }
      ],
      "next": null
    }
] 